openapi: 3.0.3
info:
  title: Person Detection Alerts API
  version: "1.0.0"
servers:
  - url: https://your-domain.example
paths:
  /api/ingest/event:
    post:
      summary: Ingest a single detection event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestEvent'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  event_id: { type: integer }
                  frame_url: { type: string, nullable: true }
                  thumbnail_url: { type: string, nullable: true }
        '401':
          description: Invalid signature or key
  /api/ingest/batch:
    post:
      summary: Ingest an array of events
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: '#/components/schemas/IngestEvent' }
      responses:
        '200': { description: OK }
  /api/events:
    get:
      summary: List events
      parameters:
        - in: query; name: camera_id; schema: { type: string, format: uuid }
        - in: query; name: type; schema: { type: string }
        - in: query; name: min_conf; schema: { type: number }
        - in: query; name: start; schema: { type: string, format: date-time }
        - in: query; name: end; schema: { type: string, format: date-time }
        - in: query; name: limit; schema: { type: integer, default: 100 }
        - in: query; name: cursor; schema: { type: integer, default: 0 }
        - in: query; name: org_id; schema: { type: string, format: uuid }
      responses: { '200': { description: OK } }
  /api/events/{id}:
    get:
      summary: Get an event
      parameters:
        - in: path; name: id; required: true; schema: { type: integer }
      responses: { '200': { description: OK }, '404': { description: Not found } }
  /api/alerts:
    get: { summary: List alert rules, responses: { '200': { description: OK } } }
    post: { summary: Create alert rule, responses: { '200': { description: Created } } }
  /api/alerts/{id}:
    patch: { summary: Update alert rule, responses: { '200': { description: OK } } }
  /api/cameras:
    get: { summary: List cameras, responses: { '200': { description: OK } } }
    post: { summary: Create camera (server-side secret handling), responses: { '200': { description: OK } } }
  /api/cameras/{id}:
    patch: { summary: Update camera, responses: { '200': { description: OK } } }
  /api/exports:
    post: { summary: Build and upload export for current filter, responses: { '200': { description: OK } } }
  /api/exports/{job_id}:
    get: { summary: Get export job status, responses: { '200': { description: OK } } }
  /api/keys:
    get: { summary: List API keys (admin), responses: { '200': { description: OK } } }
    post: { summary: Create API key (admin), responses: { '200': { description: OK } } }
  /api/keys/{id}:
    delete: { summary: Revoke API key (admin), responses: { '200': { description: OK } } }
  /api/health:
    get: { summary: Health check, responses: { '200': { description: OK } } }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    IngestEvent:
      type: object
      required: [camera_id, event_type, occurred_at]
      properties:
        camera_id: { type: string, format: uuid }
        event_type: { type: string, enum: [person_detected, person_lost, heartbeat, system] }
        confidence: { type: number, minimum: 0, maximum: 100 }
        occurred_at: { type: string, format: date-time }
        bbox: { type: array, items: { type: number }, minItems: 4, maxItems: 4 }
        frame_base64: { type: string, description: "data:image/jpeg;base64,..." }
        meta: { type: object, additionalProperties: true }
        external_event_id: { type: string }
        allow_stale: { type: boolean, description: "Allow ingest if occurred_at older than 5 minutes" }
